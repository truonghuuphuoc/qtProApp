#include "phnmessage.h"

static const uint8_t crc_table[256] =
{
    0x00, 0x25, 0x4A, 0x6F, 0x94, 0xB1, 0xDE, 0xFB, 0x0D, 0x28, 0x47, 0x62, 0x99, 0xBC, 0xD3, 0xF6,
    0x1A, 0x3F, 0x50, 0x75, 0x8E, 0xAB, 0xC4, 0xE1, 0x17, 0x32, 0x5D, 0x78, 0x83, 0xA6, 0xC9, 0xEC,
    0x34, 0x11, 0x7E, 0x5B, 0xA0, 0x85, 0xEA, 0xCF, 0x39, 0x1C, 0x73, 0x56, 0xAD, 0x88, 0xE7, 0xC2,
    0x2E, 0x0B, 0x64, 0x41, 0xBA, 0x9F, 0xF0, 0xD5, 0x23, 0x06, 0x69, 0x4C, 0xB7, 0x92, 0xFD, 0xD8,
    0x68, 0x4D, 0x22, 0x07, 0xFC, 0xD9, 0xB6, 0x93, 0x65, 0x40, 0x2F, 0x0A, 0xF1, 0xD4, 0xBB, 0x9E,
    0x72, 0x57, 0x38, 0x1D, 0xE6, 0xC3, 0xAC, 0x89, 0x7F, 0x5A, 0x35, 0x10, 0xEB, 0xCE, 0xA1, 0x84,
    0x5C, 0x79, 0x16, 0x33, 0xC8, 0xED, 0x82, 0xA7, 0x51, 0x74, 0x1B, 0x3E, 0xC5, 0xE0, 0x8F, 0xAA,
    0x46, 0x63, 0x0C, 0x29, 0xD2, 0xF7, 0x98, 0xBD, 0x4B, 0x6E, 0x01, 0x24, 0xDF, 0xFA, 0x95, 0xB0,
    0xD0, 0xF5, 0x9A, 0xBF, 0x44, 0x61, 0x0E, 0x2B, 0xDD, 0xF8, 0x97, 0xB2, 0x49, 0x6C, 0x03, 0x26,
    0xCA, 0xEF, 0x80, 0xA5, 0x5E, 0x7B, 0x14, 0x31, 0xC7, 0xE2, 0x8D, 0xA8, 0x53, 0x76, 0x19, 0x3C,
    0xE4, 0xC1, 0xAE, 0x8B, 0x70, 0x55, 0x3A, 0x1F, 0xE9, 0xCC, 0xA3, 0x86, 0x7D, 0x58, 0x37, 0x12,
    0xFE, 0xDB, 0xB4, 0x91, 0x6A, 0x4F, 0x20, 0x05, 0xF3, 0xD6, 0xB9, 0x9C, 0x67, 0x42, 0x2D, 0x08,
    0xB8, 0x9D, 0xF2, 0xD7, 0x2C, 0x09, 0x66, 0x43, 0xB5, 0x90, 0xFF, 0xDA, 0x21, 0x04, 0x6B, 0x4E,
    0xA2, 0x87, 0xE8, 0xCD, 0x36, 0x13, 0x7C, 0x59, 0xAF, 0x8A, 0xE5, 0xC0, 0x3B, 0x1E, 0x71, 0x54,
    0x8C, 0xA9, 0xC6, 0xE3, 0x18, 0x3D, 0x52, 0x77, 0x81, 0xA4, 0xCB, 0xEE, 0x15, 0x30, 0x5F, 0x7A,
    0x96, 0xB3, 0xDC, 0xF9, 0x02, 0x27, 0x48, 0x6D, 0x9B, 0xBE, 0xD1, 0xF4, 0x0F, 0x2A, 0x45, 0x60
};


uint8_t phnMessage::phnCalculateCrc(uint8_t * ptr, uint16_t length, uint8_t crc)
{

    while (length--)
    {
        crc = crc_table[crc ^ *ptr++];
    }

    return crc;
}


uint8_t phnMessage::phnMessage_CrcCalculate(uint8_t* data, uint16_t length)
{
    uint8_t crc = 0;
    uint8_t inbyte;
    uint8_t i, mix;

    uint16_t index;

    for (index = 0; index < length; index++)
    {
        inbyte = data[index];

        for (i = 8; i > 0; i--)
        {
            mix = (uint8_t)((uint8_t)(crc ^ inbyte) & (uint8_t)0x01);
            crc >>= 1;

            if (mix > 0)
            {
                crc ^= 0x8C;
            }

            inbyte >>= 1;
        }
    }

    return crc;
}

void phnMessage::phnMessage_GetMessageFormat(uint8_t* data, uint16_t inLength, uint8_t* message, uint16_t *outLength)
{
    uint8_t value, crc;
    uint8_t index;
    uint16_t position = 0;

    //Start message
    message[position] = MESG_STX;
    position++;

    //Data
    for (index = 0; index < inLength; index++)
    {
        //Data first nibble
        value = (uint8_t)(data[index] >> 4);
        message[position] = (uint8_t)((value << 4) | (value ^ 0x0F));
        position++;

        //Data second nibble
        value = (uint8_t)(data[index] & 0x0F);
        message[position] = (uint8_t)((value << 4) | (value ^ 0x0F));
        position++;
    }

    //End message
    message[position] = MESG_ETX;
    position++;

    //Crc
    crc = phnMessage_CrcCalculate(data, inLength);

    //Crc first nibble
    value = (uint8_t)(crc >> 4);
    message[position] = (uint8_t)((value << 4) | (value ^ 0x0F));
    position++;

    //Crc second nibble
    value = (uint8_t)(crc & 0x0F);
    message[position] = (uint8_t)((value << 4) | (value ^ 0x0F));
    position++;

    *outLength = position;
}
